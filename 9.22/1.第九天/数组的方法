//1. 数组方法的作用
//2. 是否需要传参
//3. 原有的数组是否发生改变；
//4. 方法的返回值

1.pop
   1. 删除数组的最后一项
   2. 不需要传参数
   3. 原有数组发生改变
   4. 删除的那一项
2.push
   1. 向数组的末尾新增一项
   2. 需要传参数，传的是新增的那几项
   3. 原有的数组发生改变
   4. 新增数组之后的长度
3.shift
   1. 删除数组的第一一项
   2. 不需要传参数
   3. 原有数组发生改变
   4. 删除的那一项
4.unshift
    1. 向数组的首尾新增一项
    2. 需要传参数，传的是新增的那几项
    3. 原有的数组发生改变
    4. 新增数组之后的长度
5.splice
    1. 增 删 改
    2.
        1)splice(m,n):从索引m开始，删除n项；
        2)splice(m,0,n)  新增
        3)splice(m,x,n)  修改
    3. 原有数组发生改变
    4. 删除的那几项组成数组

6.slice
    1. slice(m,n); 从索引m开始，截取到索引n,但不包含n;
    2. 参数
        1) : m<n  从索引m开始，截取到索引n,但不包含n;
        2) ：m>0 n>0 m>n  : 截取出一个空数组
        3）： 如果是负数，需要加上当前数组的length；
        4) : slice(m) : 从索引m开始，截取数组的末尾；slice(0)
    3.原有数组不会发生改变
    4.截取到的数组的那几项；
7.sort
    1.排序
    2. 参数
        1): sort(function(a,b){return a-b});从小到大
        2): sort(function(a,b){return b-a});从大到小
    3.原有数组发生改变
    4.排序之后的数组

8.reverse
   1.将数组的顺序颠倒过来
   2. 不需要参数
   3. 原有数组发生改变
   4. 颠倒之后的数组


9.concat
   1.数组的拼接;将两个不同的数组连接起来；将几项值放在数组的后面
   2.不传；复制了一个一模一样的数组；传；拼接之后的数组
   3.原有数组不变
   4.拼接之后的新数组

10.join
    1.按照特定的字符将数组成员连接成一个字符串
    2.需要参数
    3.原有的数组不发生改变
    4.返回一个字符串
11.indexOf
    1. 返回当前数组成员项第一次出现的索引位置
    2.需要
    3.原有数组不变
    4.当前的索引；如果不存在返回-1；
12.lastIndexOf
    1.返回当前数组成员项最后一次出现的索引位置
    2.需要
    3.原有数组不变
    4.当前的索引；如果不存在返回-1；

13.14  forEach  map :
   1.遍历循环
   2.forEach 是没有return的；返回值是undefined；map有return；
   3.原有数组不变
   4.forEach==>undefined  map==> 新的数组
15. every
   1. 找false；一旦遇到false；当前回调函数不再执行；每一项都返回true；整体结果是true；只要有一项不满足条件，那么返回false；

16.some
   1.找true；一旦遇到true；当前回调函数不再执行；只要有一个返回true，整体结果是true，如果所有项不满足，结果返回false；

17.filter
   1.过滤


